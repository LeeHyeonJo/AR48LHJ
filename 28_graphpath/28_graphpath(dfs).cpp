// 28_graphpath.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 그래프에서 이어지는 문서.
// 그래프의 경로 구현. (필기 참고하고 내부 내용 보충하기!) 

// ** 특정 노드에 도착하는 경로의 수 체크하는 법 

#include <iostream>
using namespace std; 

int matrixGraph[6][6] = // 순회 없는 버전 
{
    0,1,1,1,0,0,
    1,0,0,1,0,1,
    1,0,0,1,0,0,
    1,0,0,0,1, // 얘도 보강해야됨 
    0,0,0,0,0,
};
// 0. 어떻게 연결되어있는지 그림으로 그려보고 시작. 

char alpha[7] = "ZADCEB";
char path[10] = {}; // 경로 기록용 
int visited[10] = {}; // 중복 체크를 위한 길 

// 그래프의 특징: ** 중복체크 (비지티드)를 반드시 해줘야 한다.**
// 이유: 양방향으로 연결되어 있기 때문에, 해주지 않으면 빙빙 돌게 된다. 

// 1. 우선 모든 경로를 도는 법 부터 시작. 
// - dfs로 탐색 
// ** 예시는 Z부터 탐색했으므로, Z부터 시작하는 모든 경로를 보게 됨. 
void dfs(int level, int now) // level 은 path를 위해 now는 탐색을 위해 
{
// 여기 내부 복붙하세용. 

}


int main()
{
    // 여기서 제일 처음인 Z의 방문 여부를 path[0]에 기록, 비지티즈 에도 1로 기록 
    // dfs용 복붙하세용 
}

// 29에서 할거임. 
// 가장 간단한 경로를 찾는 법
// 지하철 노선도 가장 짧는 길 찾는 원리와 동일. 

// int min = 6567576; 하나 만들고 시작 
