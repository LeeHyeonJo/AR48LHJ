// 05_Array.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 배열: 변수 여러개를 한번에 선언하는 방법. 

#include <iostream>

int main()
{
    // 메모리에 저장되는 변수는 위치가 랜덤하게 정해진다. 
    // 운영체제(윈도우)는 메모리를 할당하고, 값을 찾아갈 수 있게 도와줌
    int a = 0;
    int b = 0;
    int c = 0;
    int d = 0;
    int e = 0;

    // 1. 배열의 문법

    int arr[5]; // int형 변수 5개 할당. 

   // 2. 배열에 값 넣는 법 
    // 인덱스: 배열의 각 값에 접근할 수 있도록 돕는 번호. 
    arr[0] = 1; // 배열의 인덱스는 0부터 시작. 거기에 1의 값을 넣어줌. (메모리 주소가 0부터 시작하기 때문) 
    arr[2] = 3;   // [0] = 0번째 변수 , [2] = 2번째 변수 

    // 3. 배열의 출력 
    std::cout << arr[2]; // 2번째 값인 3을 출력돔. 

    //4. 배열의 초기화 
    int arr[5] = { }; // 전부 0으로 초기화 
    int arr[5] = { 1,2,3,4,5 }; // 특정값으로 초기화 
    int arr[5] = { 1,2,3 }; // 입력되지 않은 값은 0으로 치환. (중간은 0입력) 

    // 아래의 초기화는 동일하다 
    int arr[3] = { 1,2,3 }; 

    arr[0] = 1;
    arr[1] = 2;
    arr[2] = 3;

    // 값을 다 넣어주는걸 "하드코딩' 이라고 한다. 
    // 툴을 만들어야 하는 경우도 있지만, 포폴할때는 그거 만들 시간에 하드코딩하는게 빠르다. 
    // 툴을 만들어야 하는 경우: 컨텐츠 양을 보고 결정됨. (툴을 만드는게 엔진 프로그래머의 역할) 

    // 5. 배열에서 꼭 주의해야할 점. 
    // 반드시 해당 배열의 최대 인덱스 (대괄호 안의 숫자)가 배열의 크기를 넘어가지 않는지 주의해야한다. 
    // 배열의 크기 = n, 최대 인덱스 = n-1 
    // ex) 위에선 크기가 5인 배열을 씀. 하단의 출력한 인덱스는 6임. 최대 인덱스가 배열의 크기를 초과함. 
 
    // 회사는 개발한 게임의 연식에 따라서 해당하는 비.스를 쓴다. 던파는 2005년꺼씀..실화냐 . 
    // 이 경우 오류를 잡아주지 않을 수도 있음. 

    std::cout<<arr[6]; //ex. 넘어간 케이스. 그럼에도 쓰레기 값이 들어간 채로 출력된다. 

    // for문의 조건문이 0부터 시작하는 경우. (int i = 0)
    // 배열의 인덱스가 0부터 시작하기 때문임 

    // for문을 이용해서 배열에 값을 넣고, 출력하기 
    // 숙제: f10으로 i값의 변화와, 그에 따른 배열의 인덱스 변화 및 값의대입 확인할것. 

    for (int i = 0; i < 3; i++)
    {
        arr[i] = 10;
    }

    // 크기가 3인 배열을 만든 후 , 0~2까지의 인덱스에 10의 메모리를 할당한다. 
    // 배열은 동적할당이 불가능하다. 다시 말해, 배열의 크기가 만드시 정해져야한다. (정적) 
    // 이하의 예시는 배열의 크기를 우선 정한 후 초기화를 한 뒤. 
    // for 문으로 배열의 인덱스에 10을 채우는 예시를 보여주고 있다. 

        int arr[3] = { 1,1,1 };

        for (int i = 0; i < 3; i++)
        {
            arr[i] = 10;

            std::cout << arr[i];
        }


    // 문제를 풀 땐 필요한 만큼 변수를 많이 써라. 
    // 위 문제를 좀 더 깔끔하게 정리한 풀이 
    
    int num = 3;
    int x;
    for (x = 0; x < 5; x++) //x로 배열 인덱스, num이 출력 
    {
        arr[x] = num;
        num++;
    }

    // 왜 메모리를 더 사용하고, 변수를 더 할당해야하는가? 
    // 요즘 컴퓨터가 좋아서 메모리 아낄 필요가 없다.
}

