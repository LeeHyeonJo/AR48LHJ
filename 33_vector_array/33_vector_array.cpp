// 33_vector_array.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 벡터,리스트의 값에 접근하는 법 : 이터레이터를 사용해서 접근한다. 

#include <iostream>
#include <vector>
#include <list>

int main()
{
   // 기존 배열의 단점: 
	int arr1[2][3] = {};
	// ㄴ 멋대로 ㅜㅅ자를 더 늘리거나, 줄이려고 할 시에 윈도우가 종료됨. 

	// 크기를 늘이거나, 줄일 수 있는 배열이 바로 벡터

	std::vector<int> Vector; // <자료형> 배열 이름 
	Vector.push_back(4); // 가장 뒤에 4의 값을 넣어줌.
	Vector.push_back(4); // 가장 뒤에 4의 값을 넣어줌.
	Vector.push_back(4); // 가장 뒤에 4의 값을 넣어줌.
	Vector.push_back(4); // 가장 뒤에 4의 값을 넣어줌.

	// 접근하는 법(연산자 오버로드로 접근 가능) 
	Vector[1] = 6; // 첫번째에 접근
	std::cout << Vector[2]; // 2번쨰에 접근 


	// ** 벡터배열은ㅇ 생성될 때, 딱 숫자만큼 만들어지기보단
	// 숫자x2배만큼 생성된다. 
	// 1. 벡터의 전체 크기를 호출하고 싶을 땐
	int len = Vector.size(); // 이렇게 호출한다. 

	// 2. 벡터의 크기를 늘리고 (= 지정하고 싶을때) 
	Vector.reserve(100); // 그러나 사용할 수 있는건 size가 있는 곳 까지 (예시에선 푸쉬백이 4번. 즉 4까지) 
	// ㄴ 메모리를 미리 넉넉하게 할당해두고 시작하는 것 (몬스터가 10마리 나오는 게임, 100개까진 미리 만들어둠) 
	// ㄴ 할당만 해둔 상태므로, 나머지 배열에는 쓰레기 갑시 들어있음. 

	// 3. 할당한 메모리(100개)를 전부 사용해보고 싶다 
	Vector.resize(100); // 100개 할당 후, size를 100을 가리키게 함. 즉, 전부 0으로 초기화한다는 의미. 

	/// +++벡터는 배열처럼 사용되므로 [] 로 접근할 수 있다+++ ///
	// ㄴ 사유: 라이브러리에서 


	//// ((((리스트의 경우)))) :: 얘는 앞, 뒤로 데이터 받아줄 수 있음. 
	// push front, push back 둘 다 가능. 
	std::list<int> List;
	List.push_back(3);
	List.push_back(3);
	List.push_back(3);
	List.push_back(3);

	//*** List[2] 이런 "직접" 접근이 불가능하다
	// >> 접근을 하기 위한 "객체" 가 필요하다. 
	// ㄴ 직접 접근해서 사용하는 순간 라이브러리를 사용하는 이유가 없어짐


	// ((  벡터 / List 돌아가는 원리 ))
	// class iterator를 통해 주소를 받아온다. (이거 이미 만들어져 있는거임) 

	// ★이터레이터 사용법; (얘는 들어오는 data의 주소를 받아주는 것) . 즉 iter는 포인터. 
	std::list<int>::iterator iter; // liter 는 그냥 이름 지정해준거임. 

	// 1. 이터레이터 iter에 제일 앞의 값을 넣어준다
	// 함수: List.begin(); 을 넣어준다. 

	// for문을 돌면서 4개의 3값을 100으로 바꿔보자. 원리는 list 의 head를 이용해서 맨 앞을 가리키고 바꾸고, head 다음으로 이동하고, 이 원리임. 

	//  iter가 제일 앞을 가리키고 / iter 가 마지막이 아닐때까지 돈다 / iter가 다음 노드를 가리키도록 

	for (iter = List.begin(); iter != List.end(); ++iter)
	{
		//iter는 data의 주소를 갖고 있으므로접근하려면 역참조를 해야한다
		(*iter) = 100; 
			// ** 이 경우, list는 생성될때 최대값 +1만큼 생성되므로, end값까지 변환되어서 바뀌게 된다.  
	}

	return 0; 
}

