// 17_Direct.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 방향 

#include <iostream>

// 타일맵 게임을 생각해보자. 캐릭터는 기본 상하좌우 네 방향으로 움직인다. 
// 아래는 캐릭터가 움직일 맵이다. 

int map[5][4] = {};

int main()
{
    // 캐릭터의 첫 위치 (2.1) 
    int x = 1;
    int y = 2; 

    //** 캐릭터의 방향을 입력해주는 방법 2가지 **
    // 어느쪽을 사용해서 문제를 풀어도 문제 없음! 

    // 1. 하드코딩 방식
    // 방향 자체를 코딩. 
    // 단점; 대각선 이동 구현 시 코드가 효율적이지 못함. 
    int left = map[y][x - 1];
    int right = map[y][x + 1];
    int top = map[y - 1][x]; // 위로 올라갈땐 y축의 값이 작아지는거 잊지 말기 
    int bottom = map[y + 1][x]; // 아래로 내려갈땐 y축의 값이 커지는거 잊지 말기 


    // 좀 더 효율적으로, "방향" 자체를 따로 두는 방식이 있다.
    // 원하는 "방향" 을 "배열" 로 구현. 
    // 사용할때는 원하는 방향의 값을 더하거나 빼주면 된다. 
    // 2. Direct 방식 : 

    // 예시: 상하좌우를 다이렉트 방식으로 사용. 
    int offset[4][2] =
    {
        0,1,  // 오른쪽 right
        0,-1, // 왼쪽 left
        1, 0, //내려감 bottom
        -1,0, // 올라감 top
    }; 

    // 실 사용: 네 방향으로 이동하기 때문에, i는 총 4번 돌면 됨.
    //( = 구현한 방향이 총 4개. y축이 4개라서 그럼) 
    // 예시: 플레이어의 새로운 좌표를 받는 방법 

    for (int i = 0; i < 4; i++)
    {
        int newx = x + offset[i][1]; // x = 기존 방향, offset = 이동할 방향 그 자체(표현:배열)
        int newy = y + offset[i][0]; // y = 기존 방향. 약간 헷갈리니 나중에 복습. 

        // 좌표를 구한 것을 확인. 
        // 그 후 map에서 플레이어가 어느 좌표에 있는지, 새로운 변수에 받아주고
        // 조건문 등을 통해서 체크해주기
        // 이하는 예시

        int data = map[newx][newy];

        //if(~)
    }

    return 0;
}

