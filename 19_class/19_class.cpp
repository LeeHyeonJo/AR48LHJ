// 19_Class.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>


class Player
{
public:
    // 생성자; 구조체 호출 시 자동으로 불려치는 함수 
    // 사용법: 구조체/클래스의 이름과 동일하게 쓰고 비워둠. 
    // 

    Player() // 목적; 구조체의 멤버변수 초기화 (방법: 2가지) 
        // 또는 2.멤버 이니셜 라이저 형태로 초기화 가능. 
    {
        // int x = 10; (1.이렇게 초기화 하거나) 
        // int y = 7; 
        // char grade = 'a';
    };



    // 이름: 멤버 변수 
    int x; // int x = 0;  이건 최신 문법. 씨샾에서 넘어옴 
    int y; // <- 이렇게 선언하고, 생성자에서 초기화하는게 C++ 스타일. 
    char grade; // 등급 
};


int main()
{
    Player warrior; // 이걸 실행하면 자동으로 생성자도 들어감 

    // **바이트 패딩**
    int len = sizeof(warrior);
    // int +int + char로 9바이트라고 생각할 수 있지만, 
    // 실제 warrior 메모리는 12 바이트가 할당된다.

    //바이트 패딩이 발생하는 이유
    //                <메모리>
    warrior.x = 10; /// ㅁ  (시작 주소)
                         //↓ 4byte 증가 (시작 주소를 넘겨줌) 
    warrior.y = 10; /// ㅁ
                         //↓1byte 증가 & 변경된 자료형의 자료.. 를 넘기는 걸 포기.  
    warrior.grade = 'a'; /// ㅁ // 4byte로 일괄 통일. = 메모리를 조금 더 쓰는 대신 연산속도를 높임
    // ㄴ char 
    // 보통 이런 주소값은 "캐시 메모리"에 저장됨.
    // ㄴ 여기에 전달되는 정보 값이 줄어듬로 연산이 늘어남. 
    
    // **바이트 패딩으로 메모리를 맞춰주는거
    // 자료형 제일 큰거 기준으로 할당.
    // double(8), int(4), int(4), char(1)
    // 8 + 8(int 2개) + 8(char) = 24 바이트 


    return 0;
}

