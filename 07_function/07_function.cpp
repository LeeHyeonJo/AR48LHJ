// 07_function.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// 함수 

#include <iostream>

//1. 함수의 정의
// 소스코드를 묶어서 반복적인 작업, 또는 나만의 기능을 명령어로 구현한 것. 

// 헬로 월드를 5번 출력해주는 함수를 만든다. 

// 전역변수 
// 특징: 프로그램의 시작과 동시에 메모리가 할당. 종료될때까지 남아있다.
// 초기화 하지 않아도 자동으로 0으로 초기화된다. (그래도 초기화해라) 
// 아주아주 많이 쌓이면 메모리가 꽉 차겠지만 어지간해선 그럴 일 없으니 일단 만들어라. 

int g = 0; 

void HelloWorld(/*필요하다면 인자가 들어감 int a */)
// 반환값  함수이름(인자)
{
    std::cout << "헬로 월드" << std::endl;
    std::cout << "헬로 월드" << std::endl;
    std::cout << "헬로 월드" << std::endl;
    std::cout << "헬로 월드" << std::endl;
    std::cout << "헬로 월드" << std::endl;

    return; // 반환하는 값이없으므로 리턴만 선언하고 끝. 
}

// 지역변수, 전역변수를 이해하기. 
// 차이 꼭 기억하기
// 전역변수는 프로그램 시작 동시에 할당, 프로그램 종료시에 메모리에서 해제. 자동 초기화. 
// 지역변수는 해당 지역내에서만 사용 가능. 해당 지역 종료(함수 종료) 시 메모리에서 해제. 수동 초기화. 

// 지역변수로만 해결 할수 있다면 지역변수 쓰면 됨. 

void increase()
{
    int s = 0;

    g++; // 전역변수이므로 사용 가능. 
}

// 숙제: 반환값이 int인 함수 직접 만들어보기
// 인자도 넣어보기 
        // 전달인자; parameter (이름은 소문자로 지어주는게 원칙) 
int add(int a, int b)
{
    int temp = 0;
    temp = a + b;
    return temp; // 반환값 주의 
}


int main()
{
    int d = add(5, 4); // 숙제: 9가 어떻게 출력되는지 함수 흐름 확인하기. 

    // 지역변수 사용할 떄 주의점 (얕은 복사의 개념) 
    // 숙제: 다른 지역에 같은 이름의 변수를 만들었을때 메모리 그려보기 
    //  ㄴ 이름은 같으나 다른 변수임을 기억해야함. 
    // [main a/5] [main b/4] [add a] [add b] (main의 변수에 저장된 값을 add에 복붙한것. 메모리 주소 완전 다름)  
    //  ㄴ 이것이 얕은 복사의 개념  (call by value = 다른 지역에서 같은 이름의 변수 선언 시, 값이 단순 복붙되어 대입되는것) 
    // 실제로는 총 4개의 변수가 사용된것임. // main에서 함수 호출 & 같 이름 변수 썼을 때. 

    int a = 5;
    int b = 4;
    int d = add(a, b);

    HelloWorld();
    // 숙제 > 호출스텍 확인; 실행분기가 main에서 helloworld로 이동하는 거 보기 
    // [메인 함수] --> [함수:헬로월드] -- 리턴 만나서 종료 --> [메인함수]
    // 모든 호출스텍의 내역을 다 보여주는 기능은 없음. 
        // 회사에선 함수의 흐름을 그려두는 문서가 따로 있음. 

    // 지역 변수 : 해당 지역 내에서만 사용 가능하다. 
    // 특징: 지역을 벗어나면(함수가 종료되면) 메모리에서 해제된다. 
    // 초기화하지 않으면 쓰레기값이 할당된다. 
    a++; // a 선언이 아직 안 되어서 사용 불가능. 
    int a = 0; 

    increase();
    g--; // 전역변수이므로 사용 가능. 

    return 0; // 0을 보내서 프로그램 종료를 알림. 
}

// f11을 누르면 에러난 함수 안으로 들어가서 하나하나 확인해볼 수 있다. 그리고 f10을 눌러서 나가면 됨. 
// f10은 오직 한줄만. 함수 안으로 들어가고 싶을 땐 f11 . 

// 조사식의 벽돌이 어두워지면 변수가 메모리에서 해제되었다는 뜻. 지역변수과 전역변수 잘 봐뒥.
// 함수의 실행, 종료여부에 따라 해제여부를 확인할 수 있다. 

// 후위연산자를 자주쓰는건 프로그래머의 버릇. 속도를 신경쓴다면 전위연산자(동일한 값을 쓴다는 전제 하에) 
// 물론 신경 안 써도 ok 