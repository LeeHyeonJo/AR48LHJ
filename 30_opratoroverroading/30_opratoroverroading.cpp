// 30_opratoroverroading.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
// r가상함수 오버로딩

// 가상함수를 선언하면
// 메모리에선 x,t,hp,mp 이외에 vtable 이라는 가상함수 테이블이 생성된다. 
// 가상함수 테이블의 역할은 함수의 주소를 받아오는 것. 

// 엄마 함수, 자식 함수가 따로 있는데.
// 자식 함수에 오버라이드를 걸어주면 ->  자식 함수의 주소가, 원래 호출되어있던 부모 함수의 주소에 덧씌워짐.

// 64비트 체제에서 주소는 8바이트. 
// 32 비트 체제에서 주소는 4바이트. 

// 예시로 그렸던 그림은 가상함수 테이블을 그냥 확장해서 그려본 것. 


// ** 가상함수의 문제
// 소멸자도 "가상함수" 를 걸어줘야 한다. 
// 가상함수를 걸어주지 않으면, 소멸자는 부모.
// 할당한 메모리는 자식이 되므로. 부모것만 삭제가 됨. 

// 그러므로 가상함수도 가상화를 걸어서 "자식" 의 소멸자가 호출되도록 해야 함. 

// 생성은 부모->자식 먼저
// 소멸은 자식->부모 순서  (* 소멸자에 가상화를 붙이지 않으면, 부모것만 지워지고 끝남)
// >> 이것을 방지하기 위해 : 소멸자에는 가상화를 붙이는 습관을 들이자. 

//// ** 가상화를 가장 잘 설명한 것: 윤성우의 C++ 가상함수 동작 원리. 
// 사용 예시: 소비 아이템(리커버리 함수) =  (리커버리 오버라이드 ... 체력, 마나, 스테미너...) 
// 엄 청 나 게 많 이 쓰 는 문 법
// 1. 상속 2. 가상함수 


//////// 순수 가상함수 & 추상 클래스
// 1. 순수 가상함수  
// 사용법; 함수 뒤에 = 0; 을 붙인다. 
// ㄴ 설계도 같은 것. 메모리를 할당받지 않은 것/ 오직 상속만을 위해 동작하는 함수 

// 순수 가상함수를 쓰면 반드시 자식들은 반드시 오버라이드를 받아야 한다(그래야 동작함)  

// 2. 추상 클래스 
// 순수 가상함수가 1개라도 들어있는 클래스는 추상 클래스가 된다.
// ㄴ 반드시 상속을 받고, 오버라이드를 해야만 사용 가능하다. 
// ㄴ (상속 받아서 쓰는 클래스라는 의미) : 타 언어에선 아예 분리되어 있다 (abstract class~) 
// ㄴ 특징; 개체 생성이 불가능해진다. 

#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
